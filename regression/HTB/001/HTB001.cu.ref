/*******************************************************
 * CUDA file generated at Sun Nov  7 16:30:33 2010
 *******************************************************/

/* Include file-level type and variable decls */
#include "HTB001.cu.h"


__global__ void MYKERNEL(
  float * g_b,
  float * g_c,
  float * g_d)
{
  int i;
  int j;
  float * c_a;
  int i_init;
  int i_end;
  int i_step;
  int i_init2;
  int i_end2;
  int i_step2;
  int tripcount;
  int tblk_stride;
  int j_init;
  int j_end;
  int j_step;
  
  c_a = (float *)(&cmem);
  i_init = (int)((threadIdx).x) + ((int)((blockIdx).x) * (int)(16U));
  i_end = 899U;
  i_step = 160U;
  for(i = i_init; i <= i_end; i = i + i_step)
  {
    g_b[i] = g_b[i] + ((float)(i) + c_a[i]);
  }
  i = ((int)((threadIdx).x) + ((int)((blockIdx).x) * (int)(16U))) * (int)(6U);
  if(i <= (int)(899U))
  {
    g_b[i] = g_b[i] + ((float)(i) + c_a[i]);
  }
  i = (int)((blockIdx).x) * (int)(90U);
  g_b[i] = g_b[i] + ((float)(i) + c_a[i]);
  tripcount = 901U;
  tblk_stride = ((tripcount + -1) / (int)(10U)) + (int)(1U);
  i_init2 = tblk_stride * (int)((blockIdx).x);
  i_end2 = (i_init2 + tblk_stride) + -1;
  if(i_end2 > (int)(900U))
  {
    i_end2 = 900U;
  }
  i_init2 = i_init2 + (int)((threadIdx).x);
  i_step2 = 16U;
  for(i = i_init2; i <= i_end2; i = i + i_step2)
  {
    g_c[i] = g_c[i] + ((float)(i) + (c_a[i] + 1.0F));
  }
  i = ((int)((threadIdx).x) + ((int)((blockIdx).x) * (int)(16U))) * (int)(6U);
  if(i <= (int)(900U))
  {
    g_c[i] = g_c[i] + ((float)(i) + (c_a[i] + 1.0F));
  }
  tripcount = 902U;
  tblk_stride = ((tripcount + -1) / (int)(10U)) + (int)(1U);
  j_init = tblk_stride * (int)((blockIdx).x);
  j_end = (tblk_stride + j_init) + -1;
  if(j_end > (int)(901U))
  {
    j_end = 901U;
  }
  j_step = 1U;
  for(j = j_init; j <= j_end; j = j + j_step)
  {
    g_d[j] = c_a[j + (int)(1U)] + g_d[j];
  }
} /* MYKERNEL */


int main(
  int argc,
  char ** argv)
{
  int i;
  float a[1000LL];
  float b[1000LL];
  float c[1000LL];
  float d[1000LL];
  float b_i;
  float c_i;
  float d_i;
  int stride;
  int batsz;
  float * g_b;
  float * g_c;
  float * g_d;
  struct dim3 dimGrid;
  struct dim3 dimBlock;
  
  for(i = 0U; i <= (int)(999U); i = i + (int)(1U))
  {
    a[i] = 1.0F;
    d[i] = 2.0F;
  }
  stride = 1U;
  batsz = stride * (int)(4000U);
  cudaMemcpyToSymbol("cmem", a, batsz, 0U, cudaMemcpyHostToDevice);
  cudaMalloc((void **) & g_b, 4000U);
  cudaMemset(g_b, 0U, 4000U);
  cudaMalloc((void **) & g_c, 4000U);
  cudaMemset(g_c, 0U, 4000U);
  cudaMalloc((void **) & g_d, 4000U);
  stride = 1U;
  batsz = stride * (int)(4000U);
  cudaMemcpy(g_d, d, batsz, cudaMemcpyHostToDevice);
  (dimGrid).x = 10U;
  (dimGrid).y = 1;
  (dimGrid).z = 1;
  (dimBlock).x = 16U;
  (dimBlock).y = 1;
  (dimBlock).z = 1;
  MYKERNEL <<< dimGrid, dimBlock >>>(g_b, g_c, g_d);
  stride = 1U;
  batsz = stride * (int)(4000U);
  cudaMemcpy(b, g_b, batsz, cudaMemcpyDeviceToHost);
  stride = 1U;
  batsz = stride * (int)(4000U);
  cudaMemcpy(c, g_c, batsz, cudaMemcpyDeviceToHost);
  stride = 1U;
  batsz = stride * (int)(4000U);
  cudaMemcpy(d, g_d, batsz, cudaMemcpyDeviceToHost);
  for(i = 0U; i <= (int)(999U); i = i + (int)(1U))
  {
    b_i = 0.0F;
    c_i = 0.0F;
    d_i = 2.0F;
    if(i <= (int)(899U))
    {
      b_i = (float)(i + (int)(1U));
    }
    if(i <= (int)(900U))
    {
      c_i = (float)(i + (int)(2U));
    }
    if(i <= (int)(901U))
    {
      d_i = 3.0F;
    }
    if(b[i] != b_i)
    {
      printf("b[%d] is incorrect!\n", i);
      goto _9;
    }
    if(c[i] != c_i)
    {
      printf("c[%d] is incorrect!\n", i);
      goto _9;
    }
    if(d[i] != d_i)
    {
      printf("d[%d] is incorrect!\n", i);
      goto _9;
    }
  }
  _9 :;
  if(i == (int)(1000U))
  {
    printf("PASSED\n");
  }
  return 0U;
} /* main */

