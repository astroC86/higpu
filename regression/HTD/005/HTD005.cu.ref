/*******************************************************
 * CUDA file generated at Fri Jun 11 08:39:25 2010
 *******************************************************/

/* Include file-level type and variable decls */
#include "HTD005.cu.h"


__global__ void test_sum(
  int * g_a1,
  int * g_result1)
{
  int i;
  
  for(i = 0U; i <= (int)(3U); i = i + (int)(1U))
  {
    * g_result1 = *g_result1 + g_a1[i];
  }
} /* test_sum */


__global__ void test_sum_clone0(
  int * g_a0,
  int * g_result0)
{
  int i;
  
  for(i = 0U; i <= (int)(3U); i = i + (int)(1U))
  {
    * g_result0 = *g_result0 + g_a0[i];
  }
} /* test_sum_clone0 */


__global__ void test_sum_clone1(
  int * g_a,
  int * g_result)
{
  int i;
  
  for(i = 0U; i <= (int)(3U); i = i + (int)(1U))
  {
    * g_result = *g_result + g_a[i];
  }
} /* test_sum_clone1 */


int sumclone1(
  int * a)
{
  register int __comma;
  int result;
  int * g_a;
  int stride;
  int batsz;
  int * g_result;
  struct dim3 dimGrid;
  struct dim3 dimBlock;
  
  a[2U] = a[2U] + (int)(1U);
  cudaMalloc((void **) & g_a, 16U);
  stride = 1U;
  batsz = stride * (int)(16U);
  cudaMemcpy(g_a, a, batsz, cudaMemcpyHostToDevice);
  cudaMalloc((void **) & g_result, 4U);
  __comma = fooclone1(a, a);
  result = result + __comma;
  (dimGrid).x = 2U;
  (dimGrid).y = 1;
  (dimGrid).z = 1;
  (dimBlock).x = 2U;
  (dimBlock).y = 1;
  (dimBlock).z = 1;
  test_sum_clone1 <<< dimGrid, dimBlock >>>(g_a, g_result);
  cudaFree(g_a);
  cudaFree(g_result);
  return result;
} /* sumclone1 */


int fooclone0clone0(
  int * b,
  int * a)
{
  int x;
  int * g_b2;
  int stride;
  int batsz;
  
  x = a[1U];
  a[0U] = a[0U] + (int)(1U);
  cudaMalloc((void **) & g_b2, 24);
  stride = 1;
  batsz = stride * 24;
  cudaMemcpy(g_b2, b, batsz, cudaMemcpyHostToDevice);
  sumclone0(b);
  cudaFree(g_b2);
  return a[0U] + x;
} /* fooclone0clone0 */


int sumclone0(
  int * a)
{
  register int __comma;
  int result;
  int * g_a0;
  int stride;
  int batsz;
  int * g_result0;
  struct dim3 dimGrid;
  struct dim3 dimBlock;
  
  a[2U] = a[2U] + (int)(1U);
  cudaMalloc((void **) & g_a0, 24U);
  stride = 1U;
  batsz = stride * (int)(24U);
  cudaMemcpy(g_a0, a, batsz, cudaMemcpyHostToDevice);
  cudaMalloc((void **) & g_result0, 4U);
  __comma = fooclone0clone0(a, a);
  result = result + __comma;
  (dimGrid).x = 2U;
  (dimGrid).y = 1;
  (dimGrid).z = 1;
  (dimBlock).x = 2U;
  (dimBlock).y = 1;
  (dimBlock).z = 1;
  test_sum_clone0 <<< dimGrid, dimBlock >>>(g_a0, g_result0);
  cudaFree(g_a0);
  cudaFree(g_result0);
  return result;
} /* sumclone0 */


int fooclone1(
  int * b,
  int * a)
{
  int x;
  int * g_b0;
  int stride;
  int batsz;
  
  x = a[1U];
  a[0U] = a[0U] + (int)(1U);
  cudaMalloc((void **) & g_b0, 16);
  stride = 1;
  batsz = stride * 16;
  cudaMemcpy(g_b0, b, batsz, cudaMemcpyHostToDevice);
  sumclone1(b);
  cudaFree(g_b0);
  return a[0U] + x;
} /* fooclone1 */


int foo(
  int * b,
  int * a)
{
  int x;
  int * g_b;
  int stride;
  int batsz;
  
  x = a[1U];
  a[0U] = a[0U] + (int)(1U);
  cudaMalloc((void **) & g_b, 16);
  stride = 1;
  batsz = stride * 16;
  cudaMemcpy(g_b, b, batsz, cudaMemcpyHostToDevice);
  sumclone1(b);
  cudaFree(g_b);
  return a[0U] + x;
} /* foo */


int foo1(
  int x)
{
  
  x = x + (int)(1U);
  return x + (int)(3U);
} /* foo1 */


int fooclone0(
  int * b,
  int * a)
{
  int x;
  int * g_b1;
  int stride;
  int batsz;
  
  x = a[1U];
  a[0U] = a[0U] + (int)(1U);
  cudaMalloc((void **) & g_b1, 24);
  stride = 1;
  batsz = stride * 24;
  cudaMemcpy(g_b1, b, batsz, cudaMemcpyHostToDevice);
  sumclone0(b);
  cudaFree(g_b1);
  return a[0U] + x;
} /* fooclone0 */


int sum(
  int * a)
{
  register int __comma;
  int result;
  int * g_a1;
  int stride;
  int batsz;
  int * g_result1;
  struct dim3 dimGrid;
  struct dim3 dimBlock;
  
  a[2U] = a[2U] + (int)(1U);
  cudaMalloc((void **) & g_a1, 16U);
  stride = 1U;
  batsz = stride * (int)(16U);
  cudaMemcpy(g_a1, a, batsz, cudaMemcpyHostToDevice);
  cudaMalloc((void **) & g_result1, 4U);
  __comma = fooclone1(a, a);
  result = result + __comma;
  (dimGrid).x = 2U;
  (dimGrid).y = 1;
  (dimGrid).z = 1;
  (dimBlock).x = 2U;
  (dimBlock).y = 1;
  (dimBlock).z = 1;
  test_sum <<< dimGrid, dimBlock >>>(g_a1, g_result1);
  cudaFree(g_a1);
  cudaFree(g_result1);
  return result;
} /* sum */


int main(
  int argc,
  char ** argv)
{
  register int __comma;
  register int __comma0;
  register int __comma1;
  register int __comma2;
  register int __comma3;
  int x;
  int i;
  int * a;
  int(*b)[5LL];
  int(*a_a)[4LL];
  int(*a_a0)[6LL];
  int(*a_a1)[4LL];
  
  a = (int *)((int(*)[6LL])(((signed char *) & arr) + 4LL));
  a_a = (int(*)[4LL])(a);
  __comma = sum((int *) a_a);
  x = __comma;
  a_a0 = (int(*)[6LL])(a);
  __comma0 = fooclone0((int *) a_a0, (int *) a_a0);
  x = x + __comma0;
  __comma1 = foo1(3U);
  x = x + __comma1;
  __comma2 = foo1(4U);
  x = x + __comma2;
  a_a1 = (int(*)[4LL])(a);
  __comma3 = foo((int *) a_a1, (int *) a_a1);
  x = x + __comma3;
  for(i = 0U; i <= (int)(3U); i = i + (int)(1U))
  {
    x = (*b)[i] + x;
  }
  arr[0U] = 0U;
  return x;
} /* main */

